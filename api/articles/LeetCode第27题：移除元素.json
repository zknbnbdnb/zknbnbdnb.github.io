{"title":"LeetCode第27题：移除元素","uid":"cabc7f1e9b78e29c3cc491c17b3d2d87","slug":"LeetCode第27题：移除元素","date":"2022-10-19T16:00:00.000Z","updated":"2022-10-20T03:50:44.111Z","comments":true,"path":"api/articles/LeetCode第27题：移除元素.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/20/8b8fb6c406772887.png","content":"<h1 id=\"27-移除元素\"><a href=\"#27-移除元素\" class=\"headerlink\" title=\"27.移除元素\"></a>27.移除元素</h1><h2 id=\"题目信息\"><a href=\"#题目信息\" class=\"headerlink\" title=\"题目信息\"></a>题目信息</h2><table>\n<thead>\n<tr>\n<th><strong>种类</strong></th>\n<th><strong>难度</strong></th>\n<th><strong>标签</strong></th>\n<th><strong>喜欢</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>算法</strong></td>\n<td><strong>Easy</strong></td>\n<td><strong>数组</strong></td>\n<td><strong>No</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong>原地</strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong>。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>说明:</p>\n<p>为什么返回数值是整数，但输出的答案是数组呢?</p>\n<p>请注意，输入数组是以<strong>引用</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n<p>你可以想象内部操作如下:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\nint len &#x3D; removeElement(nums, val);\n\n&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。\n&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i &#x3D; 0; i &lt; len; i++) &#123;\n    print(nums[i]);\n&#125;</code></pre>\n\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><em>示例1.</em></p>\n<pre><code>输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n</code></pre>\n<p><em>示例2.</em></p>\n<pre><code>输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n</code></pre>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>遍历数组<em>pop</em>元素</li>\n</ul>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        i &#x3D; 0\n        while i !&#x3D; len(nums):\n            if nums[i] &#x3D;&#x3D; val:\n                nums.pop(i)\n                continue\n            i +&#x3D; 1\n        return len(nums)</code></pre>\n\n","feature":false,"text":"27.移除元素题目信息 种类 难度 标签 喜欢 算法 Easy 数组 No 题目要求给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地修改输入数组。...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":46,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":47,"path":"api/tags/力扣.json"},{"name":"数组","slug":"数组","count":6,"path":"api/tags/数组.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">27.移除元素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">题目信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">题目要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83\"><span class=\"toc-text\">代码参考</span></a></li></ol></li></ol></li></ol>","author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"mapped":true,"prev_post":{"title":"LeetCode第901题：股票价格跨度","uid":"8ad1a84233291295facf5927e913e5d3","slug":"LeetCode第901题：股票价格跨度","date":"2022-10-20T16:00:00.000Z","updated":"2022-10-21T04:33:31.734Z","comments":true,"path":"api/articles/LeetCode第901题：股票价格跨度.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/21/195c356b47ac674b.png","text":"901.股票价格跨度题目信息 种类 难度 标签 喜欢 设计 Med 单调栈 Yes 题目要求编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。 今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"设计","slug":"设计","count":1,"path":"api/categories/设计.json"}],"tags":[{"name":"力扣","slug":"力扣","count":47,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":20,"path":"api/tags/Like.json"},{"name":"单调栈","slug":"单调栈","count":1,"path":"api/tags/单调栈.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":"ture"},"next_post":{"title":"LeetCode第46题：全排列","uid":"65ae1f33790760647c8e3c5fb1186386","slug":"LeetCode第46题：全排列","date":"2022-10-19T16:00:00.000Z","updated":"2022-10-20T04:14:48.385Z","comments":true,"path":"api/articles/LeetCode第46题：全排列.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/20/8b8fb6c406772887.png","text":"46.全排列题目信息 种类 难度 标签 喜欢 算法 Med 回溯，dfs Yes 题目要求给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 示例示例1. 输入：nums = [1,2,3] 输出：[[1,2,3],[1,3,2],...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":46,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":47,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":20,"path":"api/tags/Like.json"},{"name":"回溯","slug":"回溯","count":1,"path":"api/tags/回溯.json"},{"name":"dfs","slug":"dfs","count":1,"path":"api/tags/dfs.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":true}}