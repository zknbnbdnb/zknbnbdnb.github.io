{"title":"LeetCode第1106题：解析布尔表达式","uid":"eff89cfecd271d04935596a19f7822a7","slug":"LeetCode第1106题：解析布尔表达式","date":"2022-11-03T16:00:00.000Z","updated":"2022-11-10T11:13:19.872Z","comments":true,"path":"api/articles/LeetCode第1106题：解析布尔表达式.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/11/04/edc4ca512ad6f067.png","content":"<h1 id=\"1106-解析布尔表达式\"><a href=\"#1106-解析布尔表达式\" class=\"headerlink\" title=\"1106.解析布尔表达式\"></a>1106.解析布尔表达式</h1><h2 id=\"题目信息\"><a href=\"#题目信息\" class=\"headerlink\" title=\"题目信息\"></a>题目信息</h2><table>\n<thead>\n<tr>\n<th><strong>种类</strong></th>\n<th><strong>难度</strong></th>\n<th><strong>标签</strong></th>\n<th><strong>喜欢</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>算法</strong></td>\n<td><strong>Hard</strong></td>\n<td><strong>栈，模拟</strong></td>\n<td><strong>Yes</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>给你一个以字符串形式表述的布尔表达式（boolean） <code>expression</code>，返回该式的运算结果。</p>\n<p>有效的表达式需遵循以下约定：</p>\n<ul>\n<li><code>&quot;t&quot;</code>，运算结果为 <code>True</code></li>\n<li><code>&quot;f&quot;</code>，运算结果为 <code>False</code></li>\n<li><code>&quot;!(expr)&quot;</code>，运算过程为对内部表达式 <code>expr</code> 进行逻辑 <strong>非的运算</strong>（NOT）</li>\n<li><code>&quot;&amp;(expr1,expr2,...)&quot;</code>，运算过程为对 2 个或以上内部表达式 <code>expr1, expr2, ...</code> 进行逻辑 <strong>与的运算</strong>（AND）</li>\n<li><code>&quot;|(expr1,expr2,...)&quot;</code>，运算过程为对 2 个或以上内部表达式 <code>expr1, expr2, ...</code> 进行逻辑 <strong>或的运算</strong>（OR）</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><em>示例1.</em></p>\n<pre><code>输入：expression = &quot;!(f)&quot;\n输出：true\n</code></pre>\n<p><em>示例2.</em></p>\n<pre><code>输入：expression = &quot;|(f,t)&quot;\n输出：true\n</code></pre>\n<p><em>示例2.</em></p>\n<pre><code>输入：expression = &quot;&amp;(t,f)&quot;\n输出：false\n</code></pre>\n<p><em>示例4.</em></p>\n<pre><code>输入：expression = &quot;|(&amp;(t,f,t),!(t))&quot;\n输出：false\n</code></pre>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>首先理解题意，就能知道使用<strong>栈</strong>这个数据结构进行<strong>模拟</strong></li>\n<li>当遇到<em>右括号</em>时，就需要开始进行计算了，然后<strong>模拟</strong>步骤如下<ul>\n<li>首先遇到<em>右括号</em>时，<em>停止入栈</em></li>\n<li>将前面入栈的<em>元素</em>弹出并存入一个<em>临时数组</em></li>\n<li>然后弹出<em>左括号</em></li>\n<li>然后弹出<em>操作符</em></li>\n<li>然后根据操作符来<em>定义功能</em><ul>\n<li>如果为<em>与(&amp;)</em> 则只需找到一个f或者False即可，反之置为True</li>\n<li>如果为<em>或(|)</em> 则只需找到一个t或者True即可，反之置为False</li>\n<li>如果为<em>否(!)</em> 就把当前结果反转即可</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>若不是<em>右括号和逗号</em>则继续进栈，直到元素全部遍历一遍</li>\n<li>返回<strong>栈底</strong>就是答案</li>\n</ul>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Solution:\n    def parseBoolExpr(self, expression: str) -&gt; bool:\n        stack &#x3D; []\n        for c in expression:\n            if c &#x3D;&#x3D; &#39;)&#39;:\n                temp &#x3D; []\n                while stack[-1] !&#x3D; &#39;(&#39;:\n                    temp.append(stack.pop()) # 从栈顶取出元素\n                stack.pop()  # 弹出左括号\n                op &#x3D; stack.pop() # 弹出操作符\n                if op &#x3D;&#x3D; &#39;&amp;&#39;:\n                    for i in temp:\n                        if i &#x3D;&#x3D; &#39;f&#39; or i &#x3D;&#x3D; False:\n                            stack.append(False)\n                            break\n                    else:\n                        stack.append(True)\n                elif op &#x3D;&#x3D; &#39;|&#39;:\n                    for i in temp:\n                        if i &#x3D;&#x3D; &#39;t&#39; or i &#x3D;&#x3D; True:\n                            stack.append(True)\n                            break\n                    else:\n                        stack.append(False)\n                else:\n                    if temp[0] &#x3D;&#x3D; &#39;t&#39;:\n                        stack.append(False)\n                    elif temp[0] &#x3D;&#x3D; &#39;f&#39;:\n                        stack.append(True)\n                    else:\n                        stack.append(not temp[0])\n            elif c !&#x3D; &#39;,&#39;:\n                stack.append(c)\n        return stack[0]    </code></pre>\n\n","feature":true,"text":"1106.解析布尔表达式题目信息 种类 难度 标签 喜欢 算法 Hard 栈，模拟 Yes 题目要求给你一个以字符串形式表述的布尔表达式（boolean） expression，返回该式的运算结果。 有效的表达式需遵循以下约定： &quot;t&quot;，运算结果为 True ...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":62,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":63,"path":"api/tags/力扣.json"},{"name":"模拟","slug":"模拟","count":16,"path":"api/tags/模拟.json"},{"name":"Like","slug":"Like","count":23,"path":"api/tags/Like.json"},{"name":"栈","slug":"栈","count":4,"path":"api/tags/栈.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1106-%E8%A7%A3%E6%9E%90%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">1106.解析布尔表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">题目信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">题目要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83\"><span class=\"toc-text\">代码参考</span></a></li></ol></li></ol></li></ol>","author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"mapped":true,"prev_post":{"title":"LeetCode第1题：两数之和","uid":"e7cd1081f7fce033b0a2645969f7c542","slug":"LeetCode第1题：两数之和","date":"2022-11-03T16:00:00.000Z","updated":"2022-11-10T11:13:22.249Z","comments":true,"path":"api/articles/LeetCode第1题：两数之和.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/11/04/edc4ca512ad6f067.png","text":"1.两数之和题目信息 种类 难度 标签 喜欢 算法 Easy 哈希表 Yes 题目要求给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组...","link":"","photos":[],"count_time":{"symbolsCount":740,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":62,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":63,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":23,"path":"api/tags/Like.json"},{"name":"哈希表","slug":"哈希表","count":4,"path":"api/tags/哈希表.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":true},"next_post":{"title":"LeetCode第746题：使用最小花费爬楼梯","uid":"c7b79577f2ea1c8b47e6d7a622a64529","slug":"LeetCode第746题：使用最小花费爬楼梯","date":"2022-10-27T16:00:00.000Z","updated":"2022-10-28T14:27:14.598Z","comments":true,"path":"api/articles/LeetCode第746题：使用最小花费爬楼梯.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/26/203dabd372b13d8a.png","text":"746.使用最小花费爬楼梯题目信息 种类 难度 标签 喜欢 算法 Easy 动态规划 Yes 题目要求给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。 你可以选择从下标为 0 或下标...","link":"","photos":[],"count_time":{"symbolsCount":922,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":62,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":63,"path":"api/tags/力扣.json"},{"name":"动态规划","slug":"动态规划","count":9,"path":"api/tags/动态规划.json"},{"name":"Like","slug":"Like","count":23,"path":"api/tags/Like.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":true}}