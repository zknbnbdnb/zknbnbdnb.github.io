{"title":"LeetCode第868题：二进制间距","uid":"ac6fbac8b58301151c5e3f9393ea868c","slug":"LeetCode第868题：二进制间距","date":"2022-10-25T16:00:00.000Z","updated":"2022-10-26T13:03:11.705Z","comments":true,"path":"api/articles/LeetCode第868题：二进制间距.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/26/203dabd372b13d8a.png","content":"<h1 id=\"868-二进制间距\"><a href=\"#868-二进制间距\" class=\"headerlink\" title=\"868.二进制间距\"></a>868.二进制间距</h1><h2 id=\"题目信息\"><a href=\"#题目信息\" class=\"headerlink\" title=\"题目信息\"></a>题目信息</h2><table>\n<thead>\n<tr>\n<th><strong>种类</strong></th>\n<th><strong>难度</strong></th>\n<th><strong>标签</strong></th>\n<th><strong>喜欢</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>算法</strong></td>\n<td><strong>Easy</strong></td>\n<td><strong>模拟</strong></td>\n<td><strong>No</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>给定一个正整数 <code>n</code>，找到并返回 <code>n</code> 的二进制表示中两个 <strong>相邻</strong> 1 之间的 <strong>最长距离</strong> 。如果不存在两个相邻的 1，返回 <code>0</code> 。</p>\n<p>如果只有 <code>0</code> 将两个 <code>1</code> 分隔开（可能不存在 <code>0</code> ），则认为这两个 1 彼此 <strong>相邻</strong> 。两个 <code>1</code> 之间的距离是它们的二进制表示中位置的绝对差。例如，<code>&quot;1001&quot;</code> 中的两个 <code>1</code> 的距离为 3 。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><em>示例1.</em></p>\n<pre><code>输入：n = 22\n输出：2\n解释：22 的二进制是 &quot;10110&quot; 。\n在 22 的二进制表示中，有三个 1，组成两对相邻的 1 。\n第一对相邻的 1 中，两个 1 之间的距离为 2 。\n第二对相邻的 1 中，两个 1 之间的距离为 1 。\n答案取两个距离之中最大的，也就是 2 。\n</code></pre>\n<p><em>示例2.</em></p>\n<pre><code>输入：n = 8\n输出：0\n解释：8 的二进制是 &quot;1000&quot; 。\n在 8 的二进制表示中没有相邻的两个 1，所以返回 0 。\n</code></pre>\n<p><em>示例3.</em></p>\n<pre><code>输入：n = 5\n输出：2\n解释：5 的二进制是 &quot;101&quot; 。\n</code></pre>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>先利用<em>bin()函数转为二进制字符串</em>，记得要<strong>切片</strong>，然后判断里面<code>&#39;1&#39;</code>的个数，若为1则直接返回0</li>\n<li>然后声明tmp来用来记录<code>&#39;1&#39;</code>的位置，res来记录答案</li>\n<li>然后<em>动态跟新</em>res即可</li>\n</ul>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Solution:\n    def binaryGap(self, n: int) -&gt; int:\n        temp &#x3D; bin(n)[2:]\n        if temp.count(&quot;1&quot;) &lt;&#x3D; 1:\n            return 0\n        else:\n            res &#x3D; 0\n            tmp, res &#x3D; 0, 0\n            for i in range(len(temp)):\n                if int(temp[i]):\n                    res &#x3D; max(res, i - tmp)\n                    tmp &#x3D; i\n            return res                    </code></pre>\n\n","feature":false,"text":"868.二进制间距题目信息 种类 难度 标签 喜欢 算法 Easy 模拟 No 题目要求给定一个正整数 n，找到并返回 n 的二进制表示中两个 相邻 1 之间的 最长距离 。如果不存在两个相邻的 1，返回 0 。 如果只有 0 将两个 1 分隔开（可能不存在 0 ），则认为这两个...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":50,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":51,"path":"api/tags/力扣.json"},{"name":"模拟","slug":"模拟","count":9,"path":"api/tags/模拟.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#868-%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%97%B4%E8%B7%9D\"><span class=\"toc-text\">868.二进制间距</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">题目信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">题目要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83\"><span class=\"toc-text\">代码参考</span></a></li></ol></li></ol></li></ol>","author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"mapped":true,"prev_post":{"title":"LeetCode第862题：和至少为K的最短子数组","uid":"5d2a82a6eb0a78f238e97d50a64217cd","slug":"LeetCode第862题：和至少为K的最短子数组","date":"2022-10-25T16:00:00.000Z","updated":"2022-10-26T12:35:50.652Z","comments":true,"path":"api/articles/LeetCode第862题：和至少为K的最短子数组.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/26/203dabd372b13d8a.png","text":"862.和至少为K的最短子数组题目信息 种类 难度 标签 喜欢 算法 Hard 前缀和， 单调序列 Yes 题目要求给你一个整数数组nums和一个整数k，找出nums中和至少为k的最短非空子数组，并返回该子数组的长度。如果不存在这样的子数组 ，返回 -1 。 子数组 是数组中 连...","link":"","photos":[],"count_time":{"symbolsCount":983,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":50,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":51,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":22,"path":"api/tags/Like.json"},{"name":"前缀和","slug":"前缀和","count":1,"path":"api/tags/前缀和.json"},{"name":"单调队列","slug":"单调队列","count":1,"path":"api/tags/单调队列.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":true},"next_post":{"title":"LeetCode第908题：最小差值 I","uid":"60ae9b2236445285bb11efafcfb5a9e1","slug":"LeetCode第908题：最小差值 I","date":"2022-10-25T16:00:00.000Z","updated":"2022-10-28T14:24:10.824Z","comments":true,"path":"api/articles/LeetCode第908题：最小差值 I.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/26/203dabd372b13d8a.png","text":"908.最小差值 I题目信息 种类 难度 标签 喜欢 算法 Easy 数学 No 题目要求给你一个整数数组 nums，和一个整数 k 。 在一个操作中，您可以选择 0 &lt;= i &lt; nums.length 的任何索引 i。将 nums[i] 改为 nums[i] + ...","link":"","photos":[],"count_time":{"symbolsCount":871,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":50,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":51,"path":"api/tags/力扣.json"},{"name":"数学","slug":"数学","count":1,"path":"api/tags/数学.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":false}}