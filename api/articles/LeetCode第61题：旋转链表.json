{"title":"LeetCode第61题：旋转链表","uid":"21e1d52c3b2ce6bf6d44dddedefce323","slug":"LeetCode第61题：旋转链表","date":"2022-10-14T16:00:00.000Z","updated":"2022-10-16T09:39:30.272Z","comments":true,"path":"api/articles/LeetCode第61题：旋转链表.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/15/86a2ad1d6f96ff9e.png","content":"<h1 id=\"61-旋转链表\"><a href=\"#61-旋转链表\" class=\"headerlink\" title=\"61.旋转链表\"></a>61.旋转链表</h1><h2 id=\"题目信息\"><a href=\"#题目信息\" class=\"headerlink\" title=\"题目信息\"></a>题目信息</h2><table>\n<thead>\n<tr>\n<th><strong>种类</strong></th>\n<th><strong>难度</strong></th>\n<th><strong>标签</strong></th>\n<th><strong>喜欢</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>算法</strong></td>\n<td><strong>Med</strong></td>\n<td><strong>链表</strong></td>\n<td><strong>Yes</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><em>示例1.</em><img src=\"https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg\" alt=\"示例图片\"></p>\n<pre><code>输入：head = [1,2,3,4,5], k = 2\n输出：[4,5,1,2,3]\n</code></pre>\n<p><em>示例2.</em><img src=\"https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg\" alt=\"示例图片\"></p>\n<pre><code>输入：head = [0,1,2], k = 4\n输出：[2,0,1]\n</code></pre>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>这种旋转的思路都大致相同，<strong>将两个相同的链表连接</strong>，然后再减去<em>多余步数</em>，即使答案</li>\n<li>例如示例二可变为：<strong>0-&gt;1-&gt;2-&gt;0-&gt;1-&gt;2</strong>，然后4是大于自身3的长度即用k去<strong>取余</strong>长度即使真正的步数，<strong>真正的步数永远不会大于两倍的lenght</strong>，所以只要在遍历一遍然后用长度减去真正的步数即使答案所求链表</li>\n</ul>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val&#x3D;0, next&#x3D;None):\n#         self.val &#x3D; val\n#         self.next &#x3D; next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -&gt; Optional[ListNode]:\n        if not head or not head.next or k &#x3D;&#x3D; 0:\n            return head\n        node &#x3D; ListNode(0)\n        node.next &#x3D; head\n        p1 &#x3D; node\n        lenght &#x3D; 0\n        while p1.next:\n            lenght +&#x3D; 1\n            p1 &#x3D; p1.next\n        if k % lenght &#x3D;&#x3D; 0:\n            return head\n        p1.next &#x3D; head\n        p1 &#x3D; node\n        i &#x3D; lenght - (k % lenght)\n        while i:\n            p1 &#x3D; p1.next\n            i -&#x3D; 1\n        result &#x3D; ListNode(0)\n        result.next &#x3D; p1.next\n        p1.next &#x3D; None\n        return result.next</code></pre>\n\n","feature":false,"text":"61.旋转链表题目信息 种类 难度 标签 喜欢 算法 Med 链表 Yes 题目要求给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。 示例示例1. 输入：head = [1,2,3,4,5], k = 2 输出：[4,5,1,2,3] 示例2. 输...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":62,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":63,"path":"api/tags/力扣.json"},{"name":"链表","slug":"链表","count":7,"path":"api/tags/链表.json"},{"name":"Like","slug":"Like","count":23,"path":"api/tags/Like.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">61.旋转链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">题目信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">题目要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83\"><span class=\"toc-text\">代码参考</span></a></li></ol></li></ol></li></ol>","author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"mapped":true,"prev_post":{"title":"LeetCode第575题：分糖果","uid":"91986e7de18a1f0d056c15eb6d3ad084","slug":"LeetCode第575题：分糖果","date":"2022-10-14T16:00:00.000Z","updated":"2022-10-16T09:39:19.455Z","comments":true,"path":"api/articles/LeetCode第575题：分糖果.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/15/86a2ad1d6f96ff9e.png","text":"575.分糖果题目信息 种类 难度 标签 喜欢 算法 Eesy 脑筋急转弯 No 题目要求 Alice 有 n 枚糖，其中第 i 枚糖的类型为 candyType[i] 。Alice 注意到她的体重正在增长，所以前去拜访了一位医生。 医生建议 Alice 要少摄入糖分，只吃掉她所...","link":"","photos":[],"count_time":{"symbolsCount":883,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":62,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":63,"path":"api/tags/力扣.json"},{"name":"脑筋急转弯","slug":"脑筋急转弯","count":1,"path":"api/tags/脑筋急转弯.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":false},"next_post":{}}