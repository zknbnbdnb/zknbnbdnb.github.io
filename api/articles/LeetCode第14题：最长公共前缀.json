{"title":"LeetCode第14题：最长公共前缀","uid":"1598e1fbda62dcb3747af5504eee9b77","slug":"LeetCode第14题：最长公共前缀","date":"2022-10-16T16:00:00.000Z","updated":"2022-10-17T12:23:13.884Z","comments":true,"path":"api/articles/LeetCode第14题：最长公共前缀.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/17/b180c50e28ce5c5a.png","content":"<h1 id=\"14-最长公共前缀\"><a href=\"#14-最长公共前缀\" class=\"headerlink\" title=\"14.最长公共前缀\"></a>14.最长公共前缀</h1><h2 id=\"题目信息Q\"><a href=\"#题目信息Q\" class=\"headerlink\" title=\"题目信息Q\"></a>题目信息Q</h2><table>\n<thead>\n<tr>\n<th><strong>种类</strong></th>\n<th><strong>难度</strong></th>\n<th><strong>标签</strong></th>\n<th><strong>喜欢</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>算法</strong></td>\n<td><strong>Easy</strong></td>\n<td><strong>字符串</strong></td>\n<td><strong>No</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><em>示例1.</em></p>\n<pre><code>输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n输出：&quot;fl&quot;\n</code></pre>\n<p><em>示例2.</em></p>\n<pre><code>输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n输出：&quot;&quot;\n解释：输入不存在公共前缀。\n</code></pre>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>将数组进行按着<strong>长度排序</strong>，然后利用最短的字符串的内容来<em>匹配</em>后面的字符串</li>\n<li>只要中途断掉一次就直接返回无需重复判断</li>\n</ul>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -&gt; str:\n        strs.sort(key&#x3D;lambda i:len(i))\n        res &#x3D; &#39;&#39;\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if strs[j][i] !&#x3D; strs[0][i]:\n                    return res\n            res +&#x3D; strs[0][i]\n        return res</code></pre>\n\n","feature":true,"text":"14.最长公共前缀题目信息Q 种类 难度 标签 喜欢 算法 Easy 字符串 No 题目要求编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 &quot;&quot;。 示例示例1. 输入：strs = [&quot;flower&quot;,&q...","link":"","photos":[],"count_time":{"symbolsCount":734,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":12,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":12,"path":"api/tags/力扣.json"},{"name":"字符串","slug":"字符串","count":3,"path":"api/tags/字符串.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80\"><span class=\"toc-text\">14.最长公共前缀</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E4%BF%A1%E6%81%AFQ\"><span class=\"toc-text\">题目信息Q</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">题目要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83\"><span class=\"toc-text\">代码参考</span></a></li></ol></li></ol></li></ol>","author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"LeetCode第886题：可能的二分法","uid":"59bc9b003b7228540fe2343582c95687","slug":"LeetCode第886题：可能的二分法","date":"2022-10-15T16:00:00.000Z","updated":"2022-10-16T09:38:57.148Z","comments":true,"path":"api/articles/LeetCode第886题：可能的二分法.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/16/d2023df222146387.png","text":"886.可能的二分法题目信息 种类 难度 标签 喜欢 算法 Med 并查集 Yes 题目要求给定一组n人(编号为1, 2, ..., n), 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。 给定整数n和数组dislikes，其中dislik...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":12,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":12,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":7,"path":"api/tags/Like.json"},{"name":"并查集","slug":"并查集","count":2,"path":"api/tags/并查集.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":true}}