{"title":"LeetCode第785题：判断二分图","uid":"fe174234794c3746e58194d2817c117d","slug":"LeetCode第785题：判断二分图","date":"2022-10-15T16:00:00.000Z","updated":"2022-10-16T09:39:06.916Z","comments":true,"path":"api/articles/LeetCode第785题：判断二分图.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/16/d2023df222146387.png","content":"<h1 id=\"785-判断二分图\"><a href=\"#785-判断二分图\" class=\"headerlink\" title=\"785.判断二分图\"></a>785.判断二分图</h1><h2 id=\"题目信息\"><a href=\"#题目信息\" class=\"headerlink\" title=\"题目信息\"></a>题目信息</h2><table>\n<thead>\n<tr>\n<th><strong>种类</strong></th>\n<th><strong>难度</strong></th>\n<th><strong>标签</strong></th>\n<th><strong>喜欢</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>算法</strong></td>\n<td><strong>Med</strong></td>\n<td><strong>并查集</strong></td>\n<td><strong>Yes</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>存在一个<strong>无向图</strong>，图中有<code>n</code>个节点。其中每个节点都有一个介于<code>0</code>到<code>n - 1</code>之间的唯一编号。给你一个二维数组<code>graph</code>，其中<code>graph[u]</code>是一个节点数组，由节点<code>u</code>的邻接节点组成。形式上，对于<code>graph[u]</code>中的每个<code>v</code>，都存在一条位于节点<code>u</code>和节点<code>v</code> 之间的无向边。该无向图同时具有以下属性：</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><em>示例1.</em><img src=\"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg\" alt=\"示例图片\"></p>\n<pre><code>输入：graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\n输出：false\n解释：不能将节点分割成两个独立的子集，以使每条边都连通一个子集中的一个节点与另一个子集中的一个节点。\n</code></pre>\n<p><em>示例2.</em><img src=\"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg\" alt=\"示例图片\"></p>\n<pre><code>输入：graph = [[1,3],[0,2],[1,3],[0,2]]\n输出：true\n解释：可以将节点分成两组: &#123;0, 2&#125; 和 &#123;1, 3&#125;\n</code></pre>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>建立<strong>并查集</strong>找冲突，与第886题差不多，找到要被连接的节点<em>包含自身</em>时发生<strong>冲突</strong></li>\n</ul>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -&gt; bool:\n\t\tclass UnionFind:\n            def __init__(self, n: int):\n                self.fa &#x3D; list(range(n))\n                self.size &#x3D; [1] * n\n\n            def find(self, x: int) -&gt; int:\n                if self.fa[x] !&#x3D; x:\n                    self.fa[x] &#x3D; self.find(self.fa[x])\n                return self.fa[x]\n\n            def union(self, x: int, y: int) -&gt; None:\n                fx, fy &#x3D; self.find(x), self.find(y)\n                if fx &#x3D;&#x3D; fy:\n                    return\n                if self.size[fx] &lt; self.size[fy]:\n                    fx, fy &#x3D; fy, fx\n                self.size[fx] +&#x3D; self.size[fy]\n                self.fa[fy] &#x3D; fx\n\n            def is_connected(self, x: int, y: int) -&gt; bool:\n                return self.find(x) &#x3D;&#x3D; self.find(y)\n\n        n &#x3D; len(graph)\n        uf &#x3D; UnionFind(n)\n        for x, nodes in enumerate(graph):\n            for y in nodes:\n                uf.union(nodes[0], y)\n                if uf.is_connected(x, y):\n                    return False\n        return True</code></pre>\n\n","feature":false,"text":"785.判断二分图题目信息 种类 难度 标签 喜欢 算法 Med 并查集 Yes 题目要求存在一个无向图，图中有n个节点。其中每个节点都有一个介于0到n - 1之间的唯一编号。给你一个二维数组graph，其中graph[u]是一个节点数组，由节点u的邻接节点组成。形式上，对于gr...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":50,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":51,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":22,"path":"api/tags/Like.json"},{"name":"并查集","slug":"并查集","count":2,"path":"api/tags/并查集.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#785-%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE\"><span class=\"toc-text\">785.判断二分图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">题目信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">题目要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83\"><span class=\"toc-text\">代码参考</span></a></li></ol></li></ol></li></ol>","author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"mapped":true,"prev_post":{"title":"LeetCode第856题：括号的分数","uid":"d8a096fe7b0db144c234f1fea1d80896","slug":"LeetCode第856题：括号的分数","date":"2022-10-15T16:00:00.000Z","updated":"2022-10-18T15:02:08.003Z","comments":true,"path":"api/articles/LeetCode第856题：括号的分数.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/16/d2023df222146387.png","text":"856.括号的分数题目信息 种类 难度 标签 喜欢 算法 Med 栈, 字符串 Yes 题目要求给定一组n给定一个平衡括号字符串 S，按下述规则计算该字符串的分数： () 得 1 分。 AB 得 A + B 分，其中 A 和 B 是平衡括号字符串。 (A) 得 2 * A 分，其...","link":"","photos":[],"count_time":{"symbolsCount":817,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":50,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":51,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":22,"path":"api/tags/Like.json"},{"name":"字符串","slug":"字符串","count":6,"path":"api/tags/字符串.json"},{"name":"栈","slug":"栈","count":4,"path":"api/tags/栈.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":false},"next_post":{"title":"LeetCode第886题：可能的二分法","uid":"59bc9b003b7228540fe2343582c95687","slug":"LeetCode第886题：可能的二分法","date":"2022-10-15T16:00:00.000Z","updated":"2022-10-16T09:38:57.148Z","comments":true,"path":"api/articles/LeetCode第886题：可能的二分法.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/16/d2023df222146387.png","text":"886.可能的二分法题目信息 种类 难度 标签 喜欢 算法 Med 并查集 Yes 题目要求给定一组n人(编号为1, 2, ..., n), 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。 给定整数n和数组dislikes，其中dislik...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":50,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":51,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":22,"path":"api/tags/Like.json"},{"name":"并查集","slug":"并查集","count":2,"path":"api/tags/并查集.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":true}}