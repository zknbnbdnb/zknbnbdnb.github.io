{"title":"LeetCode第886题：可能的二分法","uid":"59bc9b003b7228540fe2343582c95687","slug":"LeetCode第886题：可能的二分法","date":"2022-10-15T16:00:00.000Z","updated":"2022-10-16T09:38:57.148Z","comments":true,"path":"api/articles/LeetCode第886题：可能的二分法.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/16/d2023df222146387.png","content":"<h1 id=\"886-可能的二分法\"><a href=\"#886-可能的二分法\" class=\"headerlink\" title=\"886.可能的二分法\"></a>886.可能的二分法</h1><h2 id=\"题目信息\"><a href=\"#题目信息\" class=\"headerlink\" title=\"题目信息\"></a>题目信息</h2><table>\n<thead>\n<tr>\n<th><strong>种类</strong></th>\n<th><strong>难度</strong></th>\n<th><strong>标签</strong></th>\n<th><strong>喜欢</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>算法</strong></td>\n<td><strong>Med</strong></td>\n<td><strong>并查集</strong></td>\n<td><strong>Yes</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>给定一组<code>n</code>人(编号为<code>1, 2, ..., n</code>), 我们想把每个人分进<strong>任意</strong>大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p>\n<p>给定整数<code>n</code>和数组<code>dislikes</code>，其中<code>dislikes[i] = [ai, bi]</code>，表示不允许将编号为<code>ai</code>和<code>bi</code>的人归入同一组。当可以用这种方法将所有人分进两组时，返回<code>true</code>；否则返回<code>false</code>。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><em>示例1.</em></p>\n<pre><code>输入：n = 4, dislikes = [[1,2],[1,3],[2,4]]\n输出：true\n解释：group1 [1,4], group2 [2,3]\n</code></pre>\n<p><em>示例2.</em></p>\n<pre><code>输入：n = 3, dislikes = [[1,2],[1,3],[2,3]]\n输出：false\n</code></pre>\n<p><em>示例3.</em></p>\n<pre><code>输入：n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\n输出：false\n</code></pre>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>先建立一个<strong>邻接矩阵</strong>来代表每个人不喜欢的人</li>\n<li>然后建立一个<strong>并查集</strong>，因为只有两组，所以<em>某个人不喜欢的人一定会在一个集合内</em></li>\n<li>最后我们使用建立的<strong>并查集</strong>进行连接，如果某个人不喜欢的人和他自身连接了就证明这组关系是有<strong>冲突</strong>的，不存在这样的二分组</li>\n<li>使用<strong>并查集的模板</strong></li>\n</ul>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -&gt; bool:\n\t\t# UnionFind类为并查集的模板\n        class UnionFind:\n            def __init__(self, n: int):\n                self.fa &#x3D; list(range(n))\n                self.size &#x3D; [1] * n\n\t\t\t\n\t\t\t# 路径压缩\n            def find(self, x: int) -&gt; int:\n                if self.fa[x] !&#x3D; x:\n                    self.fa[x] &#x3D; self.find(self.fa[x])\n                return self.fa[x]\n\n            def union(self, x: int, y: int) -&gt; None:\n                fx, fy &#x3D; self.find(x), self.find(y)\n                if fx &#x3D;&#x3D; fy:\n                    return\n                if self.size[fx] &lt; self.size[fy]:\n                    fx, fy &#x3D; fy, fx\n                self.size[fx] +&#x3D; self.size[fy]\n                self.fa[fy] &#x3D; fx\n\n            def is_connected(self, x: int, y: int) -&gt; bool:\n                return self.find(x) &#x3D;&#x3D; self.find(y)\n\n        diss &#x3D; [[] for _ in range(n)]\n        for x, y in dislikes:\n            diss[x - 1].append(y - 1)\n            diss[y - 1].append(x - 1)\n        uf &#x3D; UnionFind(n)\n        for x, nodes in enumerate(diss):\n            for y in nodes:\n                uf.union(nodes[0], y) # 处理每个人不喜欢的人的父节点\n                if uf.is_connected(x, y): # 处理过程中发现冲突直接返回\n                    return False\n        return True</code></pre>\n\n","feature":true,"text":"886.可能的二分法题目信息 种类 难度 标签 喜欢 算法 Med 并查集 Yes 题目要求给定一组n人(编号为1, 2, ..., n), 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。 给定整数n和数组dislikes，其中dislik...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":42,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":43,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":19,"path":"api/tags/Like.json"},{"name":"并查集","slug":"并查集","count":2,"path":"api/tags/并查集.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#886-%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95\"><span class=\"toc-text\">886.可能的二分法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">题目信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">题目要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83\"><span class=\"toc-text\">代码参考</span></a></li></ol></li></ol></li></ol>","author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"mapped":true,"prev_post":{"title":"LeetCode第785题：判断二分图","uid":"fe174234794c3746e58194d2817c117d","slug":"LeetCode第785题：判断二分图","date":"2022-10-15T16:00:00.000Z","updated":"2022-10-16T09:39:06.916Z","comments":true,"path":"api/articles/LeetCode第785题：判断二分图.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/16/d2023df222146387.png","text":"785.判断二分图题目信息 种类 难度 标签 喜欢 算法 Med 并查集 Yes 题目要求存在一个无向图，图中有n个节点。其中每个节点都有一个介于0到n - 1之间的唯一编号。给你一个二维数组graph，其中graph[u]是一个节点数组，由节点u的邻接节点组成。形式上，对于gr...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":42,"path":"api/categories/算法.json"}],"tags":[{"name":"力扣","slug":"力扣","count":43,"path":"api/tags/力扣.json"},{"name":"Like","slug":"Like","count":19,"path":"api/tags/Like.json"},{"name":"并查集","slug":"并查集","count":2,"path":"api/tags/并查集.json"}],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}},"feature":false},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2022-10-15T02:41:39.690Z","updated":"2022-10-17T12:25:02.415Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":"https://s3.bmp.ovh/imgs/2022/10/15/86a2ad1d6f96ff9e.png","text":"NOTHING!!(后续跟新print(&quot;hello world&quot;) ","link":"","photos":[],"count_time":{"symbolsCount":45,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"秋水","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/10/15/5e1d058ce90012ff.jpg","link":"/","description":"一个喜欢打游戏偶尔敲敲代码的懒狗","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/GitHub.svg","link":"https://github.com/zknbnbdnb"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zkdnb/"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/26324722"}}}}}}